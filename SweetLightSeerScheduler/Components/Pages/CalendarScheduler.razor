@rendermode InteractiveServer
@inject NotificationService NotificationService
@inject IGoogleCalendarService service
@inject DialogService DialogService
@inject IHttpContextAccessor httpContextAccessor

<RadzenScheduler @ref=@scheduler style="height: 100%" TItem="Appointment" Data=@appointments StartProperty="Start" EndProperty="End"
                 TextProperty="Summary" SelectedIndex=@calendarIndex AppointmentSelect=@OnAppointmentSelect>
    <RadzenWeekView />
    <RadzenDayView />
</RadzenScheduler>


@code {
    RadzenScheduler<Appointment> scheduler;
    IList<Appointment> appointments = new List<Appointment>();
    private int calendarIndex = 0;

    protected override async Task OnInitializedAsync()
    {
        var userAgent = httpContextAccessor?.HttpContext?.Request.Headers["User-Agent"].ToString();
        if (userAgent != null && (userAgent.Contains("Android") || userAgent.Contains("iPhone")))
        {
            calendarIndex = 1;
        }
        appointments = await GetSchedule();
    }

    private async Task<List<Appointment>> GetSchedule()
    {
        var result = await service.GetAppointments();

        if (result.IsSuccessful)
        {
            return result.Data;
        }
        else
        {
            NotificationService.Notify(new NotificationMessage()
            {
                Severity = NotificationSeverity.Warning,
                Summary = "Schedule Unavailable",
                Detail = "Unable to retrieve schedule. Please check again later.",
                Duration = 50000,
                Style = "position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); z-index: 9999; font-size: 1.3rem;",
            });
            return result.Data;
        }
    }

    private async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<Appointment> args)
    {
        var copy = new Appointment
        {
            Start = args.Data.Start,
            End = args.Data.End,
            EventId = args.Data.EventId,
        };

        var data = await DialogService.OpenAsync<ScheduleAppointment>("", new Dictionary<string, object> { { "Appointment", copy } });

        if (data != null)
        {
            var result = await service.ScheduleAppointment(data);

            if (result.IsSuccessful)
            {
                NotificationService.Notify(new NotificationMessage()
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Reading Request Completed",
                    Detail = "Your request for a reading has been completed. Please watch your email for an upcoming event invitation.",
                    Duration = 5000,
                    Style = "position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); z-index: 9999; font-size: 1.3rem;"
                });
            }
            else
            {
                NotificationService.Notify(new NotificationMessage()
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Reading Request Incomplete",
                    Duration = 5000,
                    Detail = "Unable to request a reading. Please try again.",
                    Style = "position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); z-index: 9999; font-size: 1.3rem;",
                });
            }
        }
        appointments = await GetSchedule();
    }
}
